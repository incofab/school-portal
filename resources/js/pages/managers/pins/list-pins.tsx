import React from 'react';
import { Pin, PinGenerator } from '@/types/models';
import ServerPaginatedTable from '@/components/server-paginated-table';
import { PaginationResponse, SelectOptionType } from '@/types/types';
import Slab, { SlabBody, SlabHeading } from '@/components/slab';
import { ServerPaginatedTableHeader } from '@/components/server-paginated-table';
import ManagerDashboardLayout from '@/layout/managers/manager-dashboard-layout';
import DateTimeDisplay from '@/components/date-time-display';
import useModalToggle from '@/hooks/use-modal-toggle';
import PinsTableFilters from '@/components/table-filters/pin-table-filters';
import { format } from 'date-fns';
import { blurStr, dateFormat } from '@/util/util';
import Dt from '@/components/dt';
import { Spacer } from '@chakra-ui/react';

interface Props {
  pins: PaginationResponse<Pin>;
  pinGenerator?: PinGenerator;
}

export default function ListPins({ pins, pinGenerator }: Props) {
  const PinModalToggle = useModalToggle();
  const headers: ServerPaginatedTableHeader<Pin>[] = [
    ...(pinGenerator
      ? []
      : [
          {
            label: 'Institution',
            value: 'institution.name',
          },
        ]),
    {
      label: 'Pin',
      value: 'pin',
      render: (row) => blurStr(row.pin),
    },
    {
      label: 'Used At',
      value: 'used_at',
      render: (row) => <DateTimeDisplay dateTime={row.used_at} />,
    },
    {
      label: 'Generated At',
      value: 'created_at',
      render: (row) => <DateTimeDisplay dateTime={row.created_at} />,
    },
  ];

  const detail: SelectOptionType<string>[] = pinGenerator
    ? [
        { label: 'Institution:', value: pinGenerator.institution!.name },
        { label: 'Generated By:', value: pinGenerator.user!.full_name },
        {
          label: 'Generated On:',
          value: format(new Date(pinGenerator.created_at), dateFormat),
        },
        { label: 'Number of Pins:', value: String(pinGenerator.num_of_pins) },
      ]
    : [];

  return (
    <ManagerDashboardLayout>
      <Slab>
        <SlabHeading title="Result Pins" />
        <SlabBody>
          <Dt contentData={detail} labelWidth={'150px'} />
          {detail && <Spacer height={5} />}
          <ServerPaginatedTable
            scroll={true}
            headers={headers}
            data={pins.data}
            keyExtractor={(row) => row.id}
            paginator={pins}
            validFilters={['term', 'institution', 'academicSession']}
            onFilterButtonClick={PinModalToggle.open}
          />
        </SlabBody>
      </Slab>
      <PinsTableFilters {...PinModalToggle.props} />
    </ManagerDashboardLayout>
  );
}
